#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d")) + 2500
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d")) + 2500
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d")) + 2500;
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d")) + 2500;
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print('TEST');
print(Days);
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
#Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print('TEST');
print(Days);
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
#Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
#Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
print('TEST');
#print(Days);
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
#Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
#print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
#Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
#Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
#print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
#Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
#Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
#print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
#Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
Print("Test?");
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
#Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
#print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
Print("Test?");
Print("Test?");
Print("Test?");
Print("Test?");
Print("Test?");
print("Test?");
# -- Retrieve data from today
# -- Don't need these messages'
suppressMessages(library('RJSONIO'));
suppressMessages(library('RCurl'));
# -- Required sources
#source('getWeatherImage.R');
#source('kelvinToFarenheit.R');
#source('getCurrentLocation.R');
# -- Required variables
appId <- "10c94e0253609fd9f78e207f831b2b09"; # -- Gained from getting an account on openweathermap.org
cityId <- "2757783"; # -- Since we only use one city, only retrieve data from this city.
#Date <- NULL; # -- Date asked to find. SHOULD BE UNIX.
TodaysDate <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
# -- test Variables
Date <- as.numeric(as.POSIXct(Sys.Date(), format="%Y-%m-%d"));
print("Test?");
# -- Retrieve data from today
# Example format: http://api.openweathermap.org/data/2.5/weather?id=2757783
if( Date == TodaysDate ){
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/weather?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
print(Weather);
# -- Retrieve data from the future
# Example format: http://api.openweathermap.org/data/2.5/forecast?id=2757783
# Limitations: 16 days in the future
} else if( Date > TodaysDate ) {
# -- First check if limitation is reached
#Days <- diff(TodaysDate, Date) * 60 * 60 * 24;
#print(Days)
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/forecast?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
# -- Retrieve data from the past
# Example format: http://api.openweathermap.org/data/2.5/historycity?id=2757783
# Limitations: 30 days in the past
} else if ( Date < TodaysDate ) {
Weather <- getURL(paste("http://api.openweathermap.org/data/2.5/historycity?id=", cityId, "&appID=", appId));
Weather <- fromJSON(Weather);
#print(Weather);
}
